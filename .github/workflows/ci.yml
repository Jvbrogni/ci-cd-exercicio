name: CI/CD Pipeline with Docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions: 
  contents: write

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest flake8 flask

      - name: Run linter
        run: flake8 app.py

      - name: Run tests
        run: pytest appteste.py

      - name: Build artifact
        run: |
          chmod +x build.sh
          ./build.sh

      # Novo passo: cria a tag para o release funcionar
      - name: Create Tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -a "v${{ github.run_number }}" -m "Release v${{ github.run_number }}"
          git push origin "v${{ github.run_number }}"

      - name: Create Release and Upload Asset
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: projeto.zip

  docker-build-publish:
    runs-on: ubuntu-latest
    needs: test-and-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/meu-app:latest -t ${{ secrets.DOCKER_USERNAME }}/meu-app:v${{ github.run_number }} .

      - name: Run tests inside container
        run: docker run --rm ${{ secrets.DOCKER_USERNAME }}/meu-app:v${{ github.run_number }} pytest test_app.py

      - name: Push to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/meu-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/meu-app:v${{ github.run_number }}
